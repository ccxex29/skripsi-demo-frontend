# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
  pull_request:
    branches:
      - master

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  test-and-output:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Install Dependencies
        run: yarn install
      - name: Run ESLint
        run: yarn eslint
      - name: Get Release Name
        id: release-name
        run: echo "::set-output name=pkg-name::$(cat package.json | jq '.name')"
      - name: Get Release Description
        id: release-description
        run: echo "::set-output name=pkg-desc::$(cat package.json | jq '.description')"
      - name: Get Release Version
        id: release-version
        run: echo "::set-output name=pkg-ver::$(cat package.json | jq '.version')"
    outputs:
      pkg-name: ${{ steps.release-name.outputs.pkg-name }}
      pkg-desc: ${{ steps.release-description.outputs.pkg-desc }}
      pkg-ver: ${{ steps.release-version.outputs.pkg-ver }}
        
  build-linuxwindows:
    needs: test-and-output
    runs-on: ubuntu-20.04
    
    steps:
      - uses: actions/checkout@v2
      - name: Install wine for Windows build
        run: |
          sudo dpkg --add-architecture i386 && 
          wget -nc https://dl.winehq.org/wine-builds/winehq.key &&
          sudo apt-key add winehq.key &&
          sudo add-apt-repository 'deb https://dl.winehq.org/wine-builds/ubuntu/ focal main' &&
          sudo apt-get update && 
          sudo apt-get install --install-recommends winehq-stable wine-stable
      - name: Install Dependencies
        run: yarn install
      - name: Build App for Linux and Windows
        run: yarn build --linux --win
      - name: Upload Linux AppImage Client
        uses: actions/upload-artifact@v2
        with:
          name: ${{ needs.test-and-output.outputs.pkg-name }}-${{ needs.test-and-output.outputs.pkg-ver }}-lin
          path: dist/${{ needs.test-and-output.outputs.pkg-desc }}-${{ needs.test-and-output.outputs.pkg-ver }}.AppImage
      - name: Upload Windows EXE Client
        uses: actions/upload-artifact@v2
        with:
          name: ${{ needs.test-and-output.outputs.pkg-name }}-${{ needs.test-and-output.outputs.pkg-ver }}-win
          path: dist/${{ needs.test-and-output.outputs.pkg-desc }} ${{ needs.test-and-output.outputs.pkg-ver }}.exe
          
  build-macos:
    needs: test-and-output
    runs-on: macOS-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Dependencies
        run: yarn install
      - name: Build App for macOS
        run: yarn build --mac
      - name: Upload macOS DMG Client
        uses: actions/upload-artifact@v2
        with:
          name: ${{ needs.test-and-output.outputs.pkg-name }}-${{ needs.test-and-output.outputs.pkg-ver }}-mac
          path: dist/${{ needs.test-and-output.outputs.pkg-desc }}-${{ needs.test-and-output.outputs.pkg-ver }}.dmg
        
  release:
    needs: [test-and-output, build-linuxwindows, build-macos]
    runs-on: ubuntu-latest
    steps:
      - name: Download Linux AppImage Client
        uses: action/download-artifact@v2
        with:
          name: ${{ needs.test-and-output.outputs.pkg-name }}-${{ needs.test-and-output.outputs.pkg-ver }}-lin
      - name: Download Windows EXE Client
        uses: action/download-artifact@v2
        with:
          name: ${{ needs.test-and-output.outputs.pkg-name }} ${{ needs.test-and-output.outputs.pkg-ver }}-win
      - name: Download macOS DMG Client
        uses: action/download-artifact@v2
        with:
          name: ${{ needs.test-and-output.outputs.pkg-name }}-${{ needs.test-and-output.outputs.pkg-ver }}-mac
      - name: Release Packages
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ needs.test-and-output.pkg-ver }}-${{ github.ref }}
          prerelease: true
          body: |
            ${{ needs.test-and-output.pkg-name }} auto built for ${{ github.ref }}
          files: |
            ${{ needs.test-and-output.outputs.pkg-desc }}-${{ needs.test-and-output.outputs.pkg-ver }}.AppImage
            ${{ needs.test-and-output.outputs.pkg-desc }} ${{ needs.test-and-output.outputs.pkg-ver }}.exe
            ${{ needs.test-and-output.outputs.pkg-desc }}-${{ needs.test-and-output.outputs.pkg-ver }}.dmg
